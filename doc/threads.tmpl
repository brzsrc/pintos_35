            +----------------------+
            |        OS 211        |
            |  TASK 1: SCHEDULING  |
            |    DESIGN DOCUMENT   |
            +----------------------+
                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, or notes for the
>> markers, please give them here.

#SSR priority donation + JST BSD scheduler
#No 64 queues

>> Please cite any offline or online sources you consulted while preparing your 
>> submission, other than the Pintos documentation, course text, lecture notes 
>> and course staff.

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> A1: (2 marks) 
>> Copy here the declaration of each new or changed `struct' or `struct' member,
>> global or static variable, `typedef', or enumeration.  
>> Identify the purpose of each in roughly 25 words.
struct thread {
    ...
    int priority;                       /* Base Priority. */
    int effective_priority;             /* Effective priority */
    struct thread *thread_waiting_for;  /* the thread that holds the lock this thread needs */
    struct list locks;                  /* The list of all the locks the thread holds */
}

struct lock {
    ...
    struct list_elem elem;      /* List elem for the list(locks) in thread.h */
}

>> A2: (4 marks) 
>> Draw a diagram that illustrates a nested donation in your structure and 
>> briefly explain how this works.
//TODO: draw diagrams
Suppose there are three threads: thread A (priority 5), thread B (priority 3), thread C (priority 1). Thread C holds lock B that thread B wants and thread B holds lock A that thread A wants. Since thread A has the highest priority, thread A is the running thread. As thread A invokes lock_acquire(), thread A will first donate to the thread that holds lock A, setting thread B's effective_priority to 5. Then, thread A will donate to the owner of the lock thread B is waiting for, which is thread C, and set thread C's effective_priority to 5 as well. This completes a nested priority donation. 

---- ALGORITHMS ----

>> A3: (3 marks) 
>> How do you ensure that the highest priority waiting thread wakes up first for
>> a (i) lock, (ii) semaphore, or (iii) condition variable?
In a semaphore, threads that waits for the semaphore to signal are stored in the semaphore's waiters list. When sema_up is invoked, the waiter list is first sorted according to the threads' priorities, ensuring that the highest priority thread is popped out from the list and unblocked.
In a lock, since the lock is implemented using semaphores, the highest priority thread is always unblocked first.
In a condition variable, the cond->waiters list is maintained sorted from the highest priority thread to lowest ones, as whenever a thread is added to the cond->waiters list, it is inserted in an order according to its priority. Hence when the condition variable signals, the highest priority threads is popped out from the front of the list and is unblocked first.

>> A4: (3 marks)
>> Describe the sequence of events when a call to lock_acquire() causes a 
>> priority donation. 
>> How is nested donation handled?
When a thread calls lock_acquire(), it first


>> A5: (3 marks)
>> Describe the sequence of events when lock_release() is called on a lock that 
>> a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> A6: (2 marks)
>> How do you avoid a race condition in thread_set_priority() when a thread 
>> needs to recompute its effective priority, but the donated priorities 
>> potentially change during the computation?
>> Can you use a lock to avoid the race?

---- RATIONALE ----

>> A7: (3 marks)
>> Why did you choose this design?  
>> In what ways is it superior to another design you considered?

              ADVANCED SCHEDULER
              ==================

---- DATA STRUCTURES ----

>> B1: (2 marks)
>> Copy here the declaration of each new or changed `struct' or `struct' member,
>> global or static variable, `typedef', or enumeration. 
>> Identify the purpose of each in roughly 25 words.

---- ALGORITHMS ----

>> B2: (3 marks)
>> Suppose threads A, B, and C have nice values 0, 1, and 2 and each has a 
>> recent_cpu value of 0. 
>> Fill in the table below showing the scheduling decision, the priority and the
>> recent_cpu values for each thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> B3: (2 marks) 
>> Did any ambiguities in the scheduler specification make values in the table 
>> uncertain? 
>> If so, what rule did you use to resolve them?

---- RATIONALE ----

>> B4: (3 marks)
>> Briefly critique your design, pointing out advantages and disadvantages in 
>> your design choices.
